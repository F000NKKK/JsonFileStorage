name: .NET Core Desktop

on:
  push:
    branches: [ "master" ]  # Событие, при котором workflow будет запускаться
  pull_request:
    branches: [ "master" ]  # Событие, при котором workflow будет запускаться

jobs:
  build:
    strategy:
      matrix:
        configuration: [Debug, Release]  # Запуск в двух конфигурациях: Debug и Release

    runs-on: windows-latest  # Используем Windows-образ для CI

    env:
      Solution_Name: TestSoft.sln  # Название вашего решения
      Test_Project_Path: TestSoft.FileStorageWebAPI.Tests/TestSoft.FileStorageWebAPI.Tests.csproj  # Путь к тестовому проекту
      Wap_Project_Directory: TestSoft.FileStorageWPFManager  # Директория для WPF-приложения
      Wap_Project_Path: TestSoft.FileStorageWPFManager/TestSoft.FileStorageWPFManager.csproj  # Путь к проекту WPF
      RestApi_Project_Directory: TestSoft.FileStorageWebAPI  # Директория для REST API проекта
      RestApi_Project_Path: TestSoft.FileStorageWebAPI/TestSoft.FileStorageWebAPI.csproj  # Путь к проекту REST API

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Установка .NET SDK
    - name: Install .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x  # Указываем версию .NET 8

    # Установка MSBuild для сборки проектов
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2

    # Восстановление зависимостей для решения
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}

    # Сборка REST API проекта
    - name: Build REST API Project
      run: dotnet build $env:RestApi_Project_Path --configuration ${{ matrix.configuration }}

    # Сборка WPF проекта
    - name: Build WPF Project
      run: dotnet build $env:Wap_Project_Path --configuration ${{ matrix.configuration }}

    # Запуск тестов
    - name: Run Unit Tests
      run: dotnet test $env:Test_Project_Path --configuration ${{ matrix.configuration }}

    # Создание пакета для WPF приложения
    - name: Create the app package for WPF
      run: msbuild $env:Wap_Project_Path /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}
      env:
        Appx_Bundle: Always
        Appx_Bundle_Platforms: x86|x64
        Appx_Package_Build_Mode: StoreUpload
        Configuration: ${{ matrix.configuration }}

    # Загрузка артефактов сборки
    - name: Upload MSIX package
      uses: actions/upload-artifact@v3
      with:
        name: MSIX Package
        path: ${{ env.Wap_Project_Directory }}\AppPackages

    # Удаление временных файлов сертификатов
    - name: Remove the pfx
      run: Remove-Item -path $env:Wap_Project_Directory\GitHubActionsWorkflow.pfx
