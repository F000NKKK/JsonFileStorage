name: .NET 8 Desktop and Web API CI/CD

on:
  push:
    branches: [ "master" ]  # Используйте вашу основную ветку, если она отличается
  pull_request:
    branches: [ "master" ]

jobs:

  build:

    strategy:
      matrix:
        configuration: [Debug, Release]  # Возможные конфигурации сборки

    runs-on: windows-latest  # Выбираем последнюю версию Windows для CI

    env:
      Solution_Name: TestSoft.sln                            # Имя вашего решения
      Test_Project_Path: TestSoft.FileStorageWebAPI.Tests/TestSoft.FileStorageWebAPI.Tests.csproj   # Путь к тестам для вашего проекта REST API
      Wap_Project_Directory: TestSoft.FileStorageWPFManager   # Директория WPF проекта
      Wap_Project_Path: TestSoft.FileStorageWPFManager/TestSoft.FileStorageWPFManager.csproj  # Путь к проекту упаковки WPF

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Устанавливаем .NET 8 SDK
    - name: Setup .NET 8 SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    # Устанавливаем MSBuild для сборки .NET проектов
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2

    # Восстановление зависимостей для всех проектов в решении
    - name: Restore Dependencies
      run: dotnet restore ${{ env.Solution_Name }}

    # Выполнение тестов
    - name: Run Tests
      run: dotnet test ${{ env.Test_Project_Path }} --configuration ${{ matrix.configuration }}

    # Создание пакета WPF приложения
    - name: Build WPF Application
      run: |
        msbuild ${{ env.Wap_Project_Path }} /p:Configuration=${{ matrix.configuration }} /p:Platform=x64

    # Упаковка приложения в MSIX
    - name: Package WPF App
      run: msbuild ${{ env.Wap_Project_Path }} /p:Configuration=${{ matrix.configuration }} /p:UapAppxPackageBuildMode=StoreUpload /p:AppxBundle=Always /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}

    # Загружаем артефакты сборки
    - name: Upload MSIX Build Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: WPF MSIX Package
        path: ${{ env.Wap_Project_Directory }}\AppPackages

    # Выполним упаковку приложения для вашего REST API (если требуется)
    - name: Build and Package REST API
      run: dotnet publish ${{ env.Solution_Name }} --configuration ${{ matrix.configuration }} --output ./publish

    # Загружаем артефакты REST API (если необходимо)
    - name: Upload API Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: REST API Build
        path: ./publish
